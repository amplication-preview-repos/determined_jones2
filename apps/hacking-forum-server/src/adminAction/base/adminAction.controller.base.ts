/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AdminActionService } from "../adminAction.service";
import { AdminActionCreateInput } from "./AdminActionCreateInput";
import { AdminAction } from "./AdminAction";
import { Post } from "../../post/base/Post";
import { AdminActionFindManyArgs } from "./AdminActionFindManyArgs";
import { AdminActionWhereUniqueInput } from "./AdminActionWhereUniqueInput";
import { AdminActionUpdateInput } from "./AdminActionUpdateInput";

export class AdminActionControllerBase {
  constructor(protected readonly service: AdminActionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AdminAction })
  async createAdminAction(
    @common.Body() data: AdminActionCreateInput
  ): Promise<AdminAction> {
    return await this.service.createAdminAction({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        action: true,
        createdAt: true,
        id: true,
        ipAddress: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AdminAction] })
  @ApiNestedQuery(AdminActionFindManyArgs)
  async adminActions(@common.Req() request: Request): Promise<AdminAction[]> {
    const args = plainToClass(AdminActionFindManyArgs, request.query);
    return this.service.adminActions({
      ...args,
      select: {
        action: true,
        createdAt: true,
        id: true,
        ipAddress: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AdminAction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async adminAction(
    @common.Param() params: AdminActionWhereUniqueInput
  ): Promise<AdminAction | null> {
    const result = await this.service.adminAction({
      where: params,
      select: {
        action: true,
        createdAt: true,
        id: true,
        ipAddress: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AdminAction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAdminAction(
    @common.Param() params: AdminActionWhereUniqueInput,
    @common.Body() data: AdminActionUpdateInput
  ): Promise<AdminAction | null> {
    try {
      return await this.service.updateAdminAction({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          action: true,
          createdAt: true,
          id: true,
          ipAddress: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AdminAction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAdminAction(
    @common.Param() params: AdminActionWhereUniqueInput
  ): Promise<AdminAction | null> {
    try {
      return await this.service.deleteAdminAction({
        where: params,
        select: {
          action: true,
          createdAt: true,
          id: true,
          ipAddress: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
