/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AdminAction } from "./AdminAction";
import { AdminActionCountArgs } from "./AdminActionCountArgs";
import { AdminActionFindManyArgs } from "./AdminActionFindManyArgs";
import { AdminActionFindUniqueArgs } from "./AdminActionFindUniqueArgs";
import { CreateAdminActionArgs } from "./CreateAdminActionArgs";
import { UpdateAdminActionArgs } from "./UpdateAdminActionArgs";
import { DeleteAdminActionArgs } from "./DeleteAdminActionArgs";
import { User } from "../../user/base/User";
import { AdminActionService } from "../adminAction.service";
@graphql.Resolver(() => AdminAction)
export class AdminActionResolverBase {
  constructor(protected readonly service: AdminActionService) {}

  async _adminActionsMeta(
    @graphql.Args() args: AdminActionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AdminAction])
  async adminActions(
    @graphql.Args() args: AdminActionFindManyArgs
  ): Promise<AdminAction[]> {
    return this.service.adminActions(args);
  }

  @graphql.Query(() => AdminAction, { nullable: true })
  async adminAction(
    @graphql.Args() args: AdminActionFindUniqueArgs
  ): Promise<AdminAction | null> {
    const result = await this.service.adminAction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AdminAction)
  async createAdminAction(
    @graphql.Args() args: CreateAdminActionArgs
  ): Promise<AdminAction> {
    return await this.service.createAdminAction({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AdminAction)
  async updateAdminAction(
    @graphql.Args() args: UpdateAdminActionArgs
  ): Promise<AdminAction | null> {
    try {
      return await this.service.updateAdminAction({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AdminAction)
  async deleteAdminAction(
    @graphql.Args() args: DeleteAdminActionArgs
  ): Promise<AdminAction | null> {
    try {
      return await this.service.deleteAdminAction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: AdminAction): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
