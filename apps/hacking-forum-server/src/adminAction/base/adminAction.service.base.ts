/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AdminAction as PrismaAdminAction,
  User as PrismaUser,
} from "@prisma/client";

export class AdminActionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AdminActionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.adminAction.count(args);
  }

  async adminActions(
    args: Prisma.AdminActionFindManyArgs
  ): Promise<PrismaAdminAction[]> {
    return this.prisma.adminAction.findMany(args);
  }
  async adminAction(
    args: Prisma.AdminActionFindUniqueArgs
  ): Promise<PrismaAdminAction | null> {
    return this.prisma.adminAction.findUnique(args);
  }
  async createAdminAction(
    args: Prisma.AdminActionCreateArgs
  ): Promise<PrismaAdminAction> {
    return this.prisma.adminAction.create(args);
  }
  async updateAdminAction(
    args: Prisma.AdminActionUpdateArgs
  ): Promise<PrismaAdminAction> {
    return this.prisma.adminAction.update(args);
  }
  async deleteAdminAction(
    args: Prisma.AdminActionDeleteArgs
  ): Promise<PrismaAdminAction> {
    return this.prisma.adminAction.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.adminAction
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
